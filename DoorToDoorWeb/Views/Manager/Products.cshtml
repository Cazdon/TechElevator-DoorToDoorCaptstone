@section Title {Products - Manager}
@section Scripts {
    @{
        bool isFormOpen = TempData["holdForm"] != null ? (bool)TempData["holdForm"] : false;

        <script>const holdForm = @(Json.Serialize(isFormOpen));</script>
        <script src="~/js/managerCreateProduct.js"></script>
        <script src="~/js/site.js"></script>
    }
}
@model ManagerProductsListViewModel
@using DoorToDoorLibrary.DatabaseObjects
    <div class="container">
        <div id="show-hide-form" class="show-hide-button">Show Create Product Form</div>
            <form asp-controller="Manager" asp-action="CreateProduct" method="post" id="manager-create-product">
                <div class="form-group">
                    <label asp-for="CreatedProduct.Name"></label>
                    <input asp-for="CreatedProduct.Name" type="text" />
                    <span asp-validation-for="CreatedProduct.Name"></span>
                </div>
                <div class="form-group">
                    <button>Create Product</button>
                    <span>
                        @Html.ValidationMessage("invalid", new { @class = "field-validation-error" })
                    </span>
                </div>
            </form>
        <div class="userlist">
            <h2>My Products</h2>
            <div class="container">
                <ul id="manager-product-list">
                    @{
                        foreach (ProductItem product in Model.Products)
                        {
                            <li class="product-list-item">&#8226; @(product.Name)</li>
                        }
                    }
                </ul>
            </div>
        </div>
    </div>